%Data handling in Javascript


JSON
----------------------------------

- **JSON** is the primary data exchange format
- Short for *Javascript Object Notation*
- It probably looks very familiar
- Very compact data format

JSON Example
------------------------------------

```{.javascript}
{
    "school": "informatics",
    "people": [ "dave", "josh", "amy" ],
    "meta": {
    	"time": "now",
    	"play": "here"
    }
}
```

JSON
---------------------------------

- Reads just like a Javascript object
- Key: value pairs

JSON - Properties
----------------------------------

```{.javascript}
{
	"myName": "Jake"
}
```

JSON - Arrays
----------------------------------

```{.javascript}
{
	
	"art": [ "Monet", "Rembrant", "Jo" ]
}
```

JSON - Objects
-----------------------------------

```{.javascript}
{
	"chair": {
		"wheels": 5,
		"color": "red",
		"pivots": true
	}
}
```

JSON - Objects in objects
-----------------------------------

```{.javascript}
{
	"pokemon": {
		"grass": {
			"favorite": "Venosaur"
		}
	}
}
```

Targeting
------------------------------------

- Getting a value out of an object
- Assuming the object before is called "myPokemon"

```{.javascript}
myPokemon.pokemon.grass.favorite; //Venosaur
```

Using JSON Data
--------------------------------------

- Create a JSON file (extension .json)
- Load the file in via AJAX
- Parse it
- **Turns into a native javascript object**

JSON.parse
----------------------------------------

- Take a string that contains valid JSON
- Turns it into a javascript object
- In jQuery, its `$.parseJSON`

getJSON
-----------------------------------------

- Alternatively, in jQuery, use th `getJson` method

```{.javascript}
$.getJSON( "ajax/test.json", function( data ) {
 	//data is a javascript object with the loaded data
	
 );
```

When to use external data
---------------------------------------- 

- Anytime your app needs to be dynamic
- Passing data from one service to another
- SQL -> PHP -> (outputs) -> JSON -> (loads) -> Javascript

JSON Example
---------------------------------------

- Music library
- Everyone has own musical taste
- Still can use the same music player

Example JSON Music library
---------------------------------------

```{.javascript}
{
	
	"albums": {
		[
			{
				"title": "The Else", 
				"artist": "They Might Be Giants",
				"date": "2007",
				"tracks": [
					"I'm Impressed",
					"The Mesopotamians"
				]
			},
			{
				"title": "Nanobots",
				"artist": "They Might Be Giants",
				"date": "2013",
				"tracks": [
					"You're on Fire",
					"Nanobots"
				]

			}
	}
}
```

Example - Displaying data
------------------------------------------

- Assumes you are using jQuery, file is `music.json`

```{.javascript}
$.getJSON( "ajax/test.json", function( data ) {
 	//data is a javascript object with the loaded data
 	//loop through data

 	for(var i = 0; i < data.albums.length; i++) {
 		$("listDiv").append("<li>" + data[i].title + "</li>");
 	}
	
);
```

Example - Linking data to the DOM, storing data
-----------------------------------------

- Add a "data" attribute to the tag

```{.javascript}
var albums; //to store the variables

$.getJSON( "ajax/test.json", function( data ) {
 	//data is a javascript object with the loaded data
 	//loop through data
 	albums = data;
 	for(var i = 0; i < data.albums.length; i++) {
 		$("listDiv").append("<li data-index='"+ i +"'>" + data[i].title + "</li>");
 	}
	
);
```

Example - Adding click
-----------------------------------------

```{.javascript}
var albums; //to store the variables
$.getJSON( "ajax/test.json", function( data ) {
 	//data is a javascript object with the loaded data
 	//loop through data
	albums = data;
 	for(var i = 0; i < data.albums.length; i++) {
 		$("listDiv").append("<li class='album' data-index='"+ i +"'>" + data[i].title + "</li>");
 	}

 	$(".album").click(function() {

 		var clickedItem = $(this);
 	});
	
);
```

Example - Gettin extra information about the album of the clicked item
-----------------------------------------

```{.javascript}
var albums; //to store the variables
$.getJSON( "ajax/test.json", function( data ) {
 	//data is a javascript object with the loaded data
 	//loop through data
	albums = data;
 	for(var i = 0; i < data.albums.length; i++) {
 		$("listDiv").append("<li class='album' data-index='"+ i +"'>" + data[i].title + "</li>");
 	}

 	$(".album").click(function() {

 		var clickedItem = $(this);
 		var index = clickedItem.data("index");
 		var album = albums[index];
 		console.log(album.artist);
 	});
);
```

Open Data/APIs
------------------------------------------

- Lots of sites expose their data for other developers
- NWS
- Youtube
- Twitter
- Flickr

Reading Data
--------------------------------------------

- Let's read something difficult
- NWS Weather data

NWS Weather Data
-------------------------------------------

```{.javascript}

{
	"operationalMode":"",
	"srsName":"WGS 1984",
	"creationDate":"2013-10-24T15:56:26-04:00",
	"creationDateLocal":"24 Oct 15:54 pm EDT",
	"productionCenter":"Indianapolis, IN",
	"credit":"http://www.crh.noaa.gov/ind",
	"moreInformation":"http://weather.gov",
	"location":{
		"latitude":"39.97",
		"longitude":"-86.17",
		"elevation":"899",
		"wfo":"IND",
		"timezone":"E|Y|5",
		"areaDescription":"3 Miles W Carmel IN",
		"radar":"kind",
		"zone":"INZ039",
		"county":"INC057",
		"firezone":"INZ039",
		"metar":"KIND"
	},
	"time":{
		"layoutKey":"k-p12h-n13-1",
		"startPeriodName":[
			"This Afternoon",
			"Tonight",
			"Friday",
			"Friday Night",
			"Saturday",
			"Saturday Night",
			"Sunday",
			"Sunday Night",
			"Monday",
			"Monday Night",
			"Tuesday",
			"Tuesday Night",
			"Wednesday"		
		],
		"startValidTime":[
			"2013-10-24T12:00:00-04:00",
			"2013-10-24T18:00:00-04:00",
			"2013-10-25T06:00:00-04:00",
			"2013-10-25T18:00:00-04:00",
			"2013-10-26T06:00:00-04:00",
			"2013-10-26T18:00:00-04:00",
			"2013-10-27T06:00:00-04:00",
			"2013-10-27T18:00:00-04:00",
			"2013-10-28T06:00:00-04:00",
			"2013-10-28T18:00:00-04:00",
			"2013-10-29T06:00:00-04:00",
			"2013-10-29T18:00:00-04:00",
			"2013-10-30T06:00:00-04:00"	
		],
		"tempLabel":["High","Low","High","Low","High","Low","High","Low","High","Low","High","Low","High"]
	},
	"data":{
		"temperature":["40","29","48","31","55","33","53","35","57","41","58","47","58"],		
		"pop":[null,null,null,null,null,null,null,null,null,null,"30","40","40"],

		"weather":[
			"Cloudy",
			"Mostly Cloudy",
			"Sunny",
			"Mostly Clear",
			"Mostly Sunny",
			"Partly Cloudy",
			"Sunny",
			"Mostly Clear",
			"Mostly Sunny",
			"Partly Cloudy",
			"Chance Showers",
			"Chance Showers",
			"Chance Showers"
			],
		"iconLink":[
			"http://forecast.weather.gov/images/wtf/medium/ovc.png",
			"http://forecast.weather.gov/images/wtf/medium/nbkn.png",
			"http://forecast.weather.gov/images/wtf/medium/few.png",
			"http://forecast.weather.gov/images/wtf/medium/nfew.png",
			"http://forecast.weather.gov/images/wtf/medium/sct.png",
			"http://forecast.weather.gov/images/wtf/medium/nsct.png",
			"http://forecast.weather.gov/images/wtf/medium/few.png",
			"http://forecast.weather.gov/images/wtf/medium/nfew.png",
			"http://forecast.weather.gov/images/wtf/medium/sct.png",
			"http://forecast.weather.gov/images/wtf/medium/nsct.png",
			"http://forecast.weather.gov/images/wtf/medium/shra30.png",
			"http://forecast.weather.gov/images/wtf/medium/nshra40.png",
			"http://forecast.weather.gov/images/wtf/medium/shra40.png"
			],
		"hazard":[

			],
		"hazardUrl":[

			],
		"text":[
			"Cloudy, with a steady temperature around 40. West northwest wind around 8 mph. ",
			"Mostly cloudy, with a low around 29. West northwest wind around 7 mph. ",
			"Sunny, with a high near 48. West northwest wind 5 to 9 mph. ",
			"Mostly clear, with a low around 31. South southwest wind 6 to 8 mph. ",
			"Mostly sunny, with a high near 55. South southwest wind 10 to 17 mph, with gusts as high as 23 mph. ",
			"Partly cloudy, with a low around 33.",
			"Sunny, with a high near 53.",
			"Mostly clear, with a low around 35.",
			"Mostly sunny, with a high near 57.",
			"Partly cloudy, with a low around 41.",
			"A 30 percent chance of showers.  Partly sunny, with a high near 58.",
			"A 40 percent chance of showers.  Mostly cloudy, with a low around 47.",
			"A 40 percent chance of showers.  Cloudy, with a high near 58."			]
		},
		"currentobservation":{
			"id":"KIND",
			"name":"Indianapolis International Airport",
			"elev":"810",
			"latitude":"39.73",
			"longitude":"-86.27",
			"Date":"24 Oct 15:54 pm EDT",
			"Temp":"38",
			"Dewp":"33",
			"Relh":"83",
			"Winds":"12",
			"Windd":"280",
			"Gust":"0",
			"Weather":" Light Rain ",
			"Weatherimage":"ra.png",
			"Visibility":"10.00",
			"Altimeter":"1022.0",
			"SLP":"30.17",
			"timezone":"EDT",
			"state":"IN",
			"WindChill":"31"
		}
	}

```

Hierarchy
----------------------------------

- Metadata
- Location
	- Object with lat, lng, zone, etc..
- Time
	- Array of 'times'
- Actual Data
	- Temp
	- Hazard
	- Textual description
	- Current observation

Parallel Arrays
-----------------------------------

- The some of the arrays above are **parallel arrays**
- A way of storing data associated with each other in two or more arrays
- Here one array stores names, while the other stores emplyment

```{.javascript}
var names = [ "Stan", "Lee", "Isolde" ];
var employment = [ "Janitor", "Cook", "Queen" ];
```

- In the example above, entry 0 in names is realted to entry 0 in emplyment.
- So Stan is a Janitor, Lee is a cook, and Isolde is a Queen
- Can easily get all the data with a for loop

```{.javascript}
for( var i = 0; i < names.length; i++) {
	console.log( names[i] + " is a " + employment[i]);
}
```

Parallel Data in the weather array
--------------------------------------

- Time
- Temp
- Hazard
- Textual description

Another example - Flickr
-------------------------------------

- http://api.flickr.com/services/feeds/photos_public.gne?format=json

Flickr output (truncated to 2 results)
--------------------------------------

```{.javascript}
jsonFlickrFeed({
		"title": "Uploads from everyone",
		"link": "http://www.flickr.com/photos/",
		"description": "",
		"modified": "2013-10-25T13:47:47Z",
		"generator": "http://www.flickr.com/",
		"items": [
	   {
			"title": "makeup pic",
			"link": "http://www.flickr.com/photos/106586208@N03/10475495325/",
			"media": {"m":"http://farm4.staticflickr.com/3695/10475495325_fb23e861b8_m.jpg"},
			"date_taken": "2013-10-25T06:47:47-08:00",
			"description": " <p><a href=\"http://www.flickr.com/people/106586208@N03/\">dylandambella<\/a> posted a photo:<\/p> <p><a href=\"http://www.flickr.com/photos/106586208@N03/10475495325/\" title=\"makeup pic\"><img src=\"http://farm4.staticflickr.com/3695/10475495325_fb23e861b8_m.jpg\" width=\"240\" height=\"240\" alt=\"makeup pic\" /><\/a><\/p> ",
			"published": "2013-10-25T13:47:47Z",
			"author": "nobody@flickr.com (dylandambella)",
			"author_id": "106586208@N03",
			"tags": "flickrandroidapp:filter=none"
	   },
	   {
			"title": "IMG_4059",
			"link": "http://www.flickr.com/photos/prestigecb/10475495355/",
			"media": {"m":"http://farm6.staticflickr.com/5499/10475495355_a866414924_m.jpg"},
			"date_taken": "2013-10-25T07:58:27-08:00",
			"description": " <p><a href=\"http://www.flickr.com/people/prestigecb/\">Prestige Custom Builders<\/a> posted a photo:<\/p> <p><a href=\"http://www.flickr.com/photos/prestigecb/10475495355/\" title=\"IMG_4059\"><img src=\"http://farm6.staticflickr.com/5499/10475495355_a866414924_m.jpg\" width=\"179\" height=\"240\" alt=\"IMG_4059\" /><\/a><\/p> ",
			"published": "2013-10-25T13:47:47Z",
			"author": "nobody@flickr.com (Prestige Custom Builders)",
			"author_id": "74246055@N07",
			"tags": ""
	   }
        ]
})
```

Origin Policy and JSONP
---------------------------------------

- JSON is great
- Lots of sites can output JSON
- However!
- Javascript cannot load files that are not on the same webserver
- A JS file on www.somesite.com cannot load from www.example.com
- This is sometime called the "origin policy"
- JSONP is the solution

JSONP
----------------------------------------

- Allows you to make cross-site calls
- Server providing the data must be configured to allow the load
- **When making the request** need to provide a callback parameter

```
http://www.xyz.com/sample.aspx?callback=mycallback
```

- Server wraps the JSON Data in a javascript function that is run when the data loads on your side

*Example server response*

```{.javascript}
mycallback({ foo: 'bar' });
```

- On your side, setup a function to run when the data loads

```{.javascript}
mycallback = function(data){
  alert(data.foo);
};
```

Reading the Flickr Feed
---------------------------------

- Metadata at the top
- Items (array)
- Each item:
	- Data about each individual picture
	- Key ones
		- Title
		- Media
		- Description

Example use of flickr feed
---------------------------------

- Using jQuery (of course)
- Loads the most recent pictures, appends them into a div

```{.javascript}

$.getJSON("http://api.flickr.com/services/feeds/photos_public.gne?format=json", function(data) {
	//'data' has the

	var picturesDiv = $("#pDiv");

	for(var i = 0; i < data.items.length; i++) {
		picturesDiv.append("<img src='" + data.items[i].media + "' />")
	}
})

```